openapi: 3.0.0
info:
  title: HNG Stage 3 Backend
  description: This is a HNG Stage 3 Backend task
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/GITHUKUELIUD/HNG-Stage-3/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: Admins
  description: Secured Admin-only calls
- name: Authentication
  description: Authentication operations
- name: Payments
  description: Operations related to payment management
- name: Users
  description: User management operations
- name: Organisations
  description: Organisation management operations
- name: Superadmin
  description: Superadmin operations
paths:
  /admin/users:
    get:
      tags:
      - Admins
      summary: Returns all the users
      description: An admin has the ability to see all the users in the system
      operationId: adminGetAllUsers
      responses:
        "200":
          description: Get all users in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                users:
                  value:
                  - userId: user1
                    firstName: java dev
                    email: javadev@example.com
                  - userId: user2
                    firstName: spring boot
                    email: springboot@example.com
        "400":
          description: Bad input parameter
        "403":
          description: Unauthorized
    post:
      tags:
      - Admins
      summary: Adds a user
      description: Adds a user to the system
      operationId: addUser
      requestBody:
        description: User object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              user:
                value:
                  userId: user3
                  firstName: backend dev
                  email: backenddev@example.com
        required: true
      responses:
        "201":
          description: User created
        "400":
          description: "Invalid user input, user not added"
        "409":
          description: A user with provided details already exists
        "403":
          description: Unauthorized
        "401":
          description: Bad request
  /admin/users/{userId}:
    put:
      tags:
      - Admins
      summary: Edit user details
      description: Updates a user in the system
      operationId: adminUpdateUser
      parameters:
      - name: userId
        in: path
        description: ID of the user to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: User object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              user:
                value:
                  userId: user1
                  firstName: java dev
                  email: javadev@example.com
        required: true
      responses:
        "200":
          description: User updated
        "400":
          description: "Invalid user input, user not updated"
        "409":
          description: A user with provided doesn't exists
        "403":
          description: Unauthorized
        "401":
          description: Bad request
        "404":
          description: user not found
    delete:
      tags:
      - Admins
      summary: Delete a user
      description: Deletes a user from the system
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: ID of the user to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted
        "400":
          description: Invalid user ID
        "403":
          description: Unauthorized
        "404":
          description: User not found
  /users:
    get:
      tags:
      - Users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: getAllUsers
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
    post:
      tags:
      - Users
      summary: Create a user
      description: Create a new user
      operationId: createUser
      requestBody:
        description: User object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created
        "400":
          description: Invalid input
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Get a user by ID
      description: Retrieve details of a specific user
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: ID of the user to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid ID
        "401":
          description: Unauthorized
        "404":
          description: User not found
    put:
      tags:
      - Users
      summary: Update a user
      description: Update details of a specific user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: ID of the user to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: User object with updated details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: User updated
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: User not found
  /organisations:
    get:
      tags:
      - Organisations
      summary: Get all organisations
      description: Retrieve a list of all organisations
      operationId: getAllOrganisations
      responses:
        "200":
          description: A list of organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
    post:
      tags:
      - Organisations
      summary: Create an organisation
      description: Create a new organisation
      operationId: createOrganisation
      requestBody:
        description: Organisation object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
        required: true
      responses:
        "201":
          description: Organisation created
        "400":
          description: Invalid input
  /organisations/{organisationId}:
    get:
      tags:
      - Organisations
      summary: Get an organisation by ID
      description: Retrieve details of a specific organisation
      operationId: getOrganisationById
      parameters:
      - name: organisationId
        in: path
        description: ID of the organisation to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Organisation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        "400":
          description: Invalid ID
        "401":
          description: Unauthorized
        "404":
          description: Organisation not found
    put:
      tags:
      - Organisations
      summary: Update an organisation
      description: Update details of a specific organisation
      operationId: updateOrganisation
      parameters:
      - name: organisationId
        in: path
        description: ID of the organisation to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Organisation object with updated details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
        required: true
      responses:
        "200":
          description: Organisation updated
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Organisation not found
    delete:
      tags:
      - Organisations
      summary: Delete an organisation
      description: Delete a specific organisation
      operationId: deleteOrganisation
      parameters:
      - name: organisationId
        in: path
        description: ID of the organisation to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Organisation deleted
        "400":
          description: Invalid ID
        "401":
          description: Unauthorized
        "404":
          description: Organisation not found
  /organisations/{organisationId}/roles/{userId}:
    put:
      tags:
      - Organisations
      - Users
      - Superadmin
      summary: Edit user organisation role
      description: Edit a user role in a specific organisation
      operationId: editUserRoleInOrganisation
      parameters:
      - name: organisationId
        in: path
        description: ID of the organisation to edit the user role in
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: userId
        in: path
        description: ID of the user whose role is being edited
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: User role object to be edited
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleRequest'
        required: true
      responses:
        "200":
          description: User role updated in organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRoleResponse'
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Organisation or user not found
  /superadmin/users:
    get:
      tags:
      - Superadmin
      summary: Superadmin get all users
      description: Superadmin retrieves all users
      operationId: superadminGetAllUsers
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
  /superadmin/organisations:
    get:
      tags:
      - Superadmin
      summary: Superadmin get all organisations
      description: Superadmin retrieves all organisations
      operationId: superadminGetAllOrganisations
      responses:
        "200":
          description: A list of organisations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
  /superadmin/payments:
    get:
      tags:
      - Superadmin
      summary: Superadmin get all payments
      description: Superadmin retrieves all payments
      operationId: superadminGetAllPayments
      responses:
        "200":
          description: A list of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentDto'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
  /superadmin/activity-log:
    get:
      tags:
      - Superadmin
      summary: Superadmin get activity log
      description: Superadmin retrieves the activity log
      operationId: superadminGetActivityLog
      responses:
        "200":
          description: Activity log
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActivityLog'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
  /superadmin/email-templates:
    get:
      tags:
      - Superadmin
      summary: Superadmin get all email templates
      description: Superadmin retrieves all email templates
      operationId: superadminGetAllEmailTemplates
      responses:
        "200":
          description: A list of email templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmailTemplate'
        "400":
          description: Invalid request
        "401":
          description: Unauthorized
    post:
      tags:
      - Superadmin
      summary: Superadmin create an email template
      description: Superadmin creates a new email template
      operationId: superadminCreateEmailTemplate
      requestBody:
        description: Email template object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplate'
            examples:
              emailTemplate:
                value:
                  templateId: email1
                  name: Welcome Email
                  subject: Welcome to our service!
                  body: <html><body><h1>Welcome</h1><p>Thanks for joining us!</p></body></html>
        required: true
      responses:
        "201":
          description: Email template created
        "400":
          description: "Invalid input, template not created"
        "401":
          description: Unauthorized
  /superadmin/email-templates/{templateId}:
    get:
      tags:
      - Superadmin
      summary: Superadmin get an email template
      description: Superadmin retrieves a specific email template
      operationId: superadminGetEmailTemplate
      parameters:
      - name: templateId
        in: path
        description: ID of the email template to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: An email template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTemplate'
        "400":
          description: Invalid template ID
        "401":
          description: Unauthorized
        "404":
          description: Template not found
    put:
      tags:
      - Superadmin
      summary: Superadmin update an email template
      description: Superadmin updates a specific email template
      operationId: superadminUpdateEmailTemplate
      parameters:
      - name: templateId
        in: path
        description: ID of the email template to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Email template object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailTemplate'
            examples:
              emailTemplate:
                value:
                  templateId: email1
                  name: Welcome Email
                  subject: Welcome to our service!
                  body: <html><body><h1>Welcome</h1><p>Thanks for joining us!</p></body></html>
        required: true
      responses:
        "200":
          description: Email template updated
        "400":
          description: "Invalid input, template not updated"
        "401":
          description: Unauthorized
        "404":
          description: Template not found
    delete:
      tags:
      - Superadmin
      summary: Superadmin delete an email template
      description: Superadmin deletes a specific email template
      operationId: superadminDeleteEmailTemplate
      parameters:
      - name: templateId
        in: path
        description: ID of the email template to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Email template deleted
        "400":
          description: Invalid template ID
        "401":
          description: Unauthorized
        "404":
          description: Template not found
  /auth/login:
    post:
      tags:
      - Authentication
      summary: User login
      description: Logs in a user with email and password
      operationId: loginUser
      requestBody:
        description: Login details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              login:
                value:
                  email: victor@example.com
                  password: password123
        required: true
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Invalid login details
        "401":
          description: Unauthorized
  /auth/register:
    post:
      tags:
      - Authentication
      summary: User registration
      description: Registers a new user
      operationId: registerUser
      requestBody:
        description: Registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              register:
                value:
                  firstName: Victor
                  lastName: Adepoju
                  email: user@example.com
                  password: password123
                  phone: "08123456789"
        required: true
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid registration details
  /auth/social:
    post:
      tags:
      - Authentication
      summary: Social authentication
      description: Logs in or registers a user using social authentication
      operationId: socialAuth
      requestBody:
        description: Social authentication details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialAuthRequest'
            examples:
              socialAuth:
                value:
                  provider: google
                  token: socialauth_token
        required: true
      responses:
        "200":
          description: Social authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Invalid social authentication details
        "401":
          description: Unauthorized
  /auth/magic-link:
    post:
      tags:
      - Authentication
      summary: Request magic link
      description: Sends a magic link to the user's email
      operationId: requestMagicLink
      requestBody:
        description: Magic link request details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MagicLinkRequest'
            examples:
              magicLink:
                value:
                  email: victor@example.com
        required: true
      responses:
        "200":
          description: Magic link sent successfully
        "400":
          description: Invalid email
  /auth/magic-link/verify:
    post:
      tags:
      - Authentication
      summary: Verify magic link
      description: Verifies the magic link
      operationId: verifyMagicLink
      requestBody:
        description: Magic link verification details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MagicLinkVerifyRequest'
            examples:
              magicLinkVerify:
                value:
                  token: magic_link_token
        required: true
      responses:
        "200":
          description: Magic link verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "400":
          description: Invalid token
        "401":
          description: Unauthorized
  /auth/change-password:
    post:
      tags:
      - Authentication
      summary: Change password
      description: Changes the user's password
      operationId: changePassword
      requestBody:
        description: Change password details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            examples:
              changePassword:
                value:
                  oldPassword: oldpassword123
                  newPassword: newpassword123
        required: true
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: Invalid password details
        "401":
          description: Unauthorized
  /auth/refresh-token:
    post:
      tags:
      - Authentication
      summary: Refresh Access Token
      description: Refreshes the user's access token
      operationId: refreshAccessToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              refreshAccessToken:
                value:
                  refreshToken: your_refresh_token_here
        required: true
      responses:
        "200":
          description: Access token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessTokenResponse'
        "400":
          description: Invalid refresh token details
        "401":
          description: Unauthorized
  /payment:
    get:
      tags:
      - Payments
      summary: Returns all the payments
      description: An Admin can see all payments in the system
      operationId: getAllPayments
      responses:
        "200":
          description: Get all payments in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentDto'
              examples:
                payments:
                  value:
                  - paymentId: adc2-skck-23k0-$9sc
                    orderId: 101
                    amount: 100.0
                    paymentMethod: credit_card
                    createdAt: 2024-07-01
                    completedAt: 2024-07-01
                  - paymentId: adc2-skck-23k0-$9sc
                    orderId: 102
                    amount: 200.0
                    paymentMethod: paypal
                    createdAt: 2024-07-02
                    completedAt: 2024-07-02
        "400":
          description: Bad input parameter
        "403":
          description: Unauthorized
    post:
      tags:
      - Payments
      summary: Adds a payment
      description: Adds a payment to the system
      operationId: addPayment
      requestBody:
        description: Payment object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDto'
            examples:
              payment:
                value:
                  id: payment001
                  paymentId: adc2-skck-23k0-$9sc
                  orderId: 101
                  amount: 100.0
                  paymentMethod: credit_card
        required: true
      responses:
        "201":
          description: Payment created
        "400":
          description: "Invalid payment input, payment not added"
        "403":
          description: Unauthorized
        "401":
          description: Bad request
  /payments/{paymentId}:
    get:
      tags:
      - Payments
      summary: Get a payment by ID
      description: Get details of a specific payment by its ID
      operationId: getPaymentById
      parameters:
      - name: paymentId
        in: path
        description: ID of the payment to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDto'
              examples:
                payment:
                  value:
                    id: payment001
                    paymentId: adc2-skck-23k0-$9sc
                    orderId: 101
                    amount: 100.0
                    paymentMethod: credit_card
                    createdAt: 2024-07-01
                    completedAt: 2024-07-01
        "400":
          description: Invalid payment ID
        "403":
          description: Unauthorized
        "404":
          description: Payment not found
    put:
      tags:
      - Payments
      summary: Update a payment by ID
      description: Updates a payment in the system
      operationId: updatePayment
      parameters:
      - name: paymentId
        in: path
        description: ID of the payment to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Payment object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentDto'
            examples:
              payment:
                value:
                  amount: 100.0
                  paymentMethod: credit_card
        required: true
      responses:
        "200":
          description: Payment updated
        "400":
          description: "Invalid payment input, payment not updated"
        "403":
          description: Unauthorized
        "401":
          description: Bad request
        "404":
          description: Payment not found
  /admin/notifications:
    get:
      tags:
      - Admins
      summary: Returns all the notifications
      description: An admin has the ability to see all the notifications in the system
      operationId: adminGetAllNotifications
      responses:
        "200":
          description: Get all notifications in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notifications'
              examples:
                notifications:
                  value:
                  - id: user1
                    title: java devs meeting
                    body: There will be a stand up at 5:30pm kindly attend
                    sender: admin@email.com
                    recipient: backend devs
                    timeSent: 08:00am
                  - id: user2
                    title: spring security bootcamp
                    body: "There will be a bootcamp on Monday 5th May, 2023 on Spring security. Kindly purpose to attend."
                    sender: admin@email.com
                    recipient: backend devs
                    timeSent: 08:00am
        "400":
          description: Bad input parameter
        "403":
          description: Unauthorized
    post:
      tags:
      - Admins
      summary: Sends a notification
      description: Sends notification to the target users
      operationId: sendNotification
      requestBody:
        description: Notification object that needs to be added to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notifications'
            examples:
              notification:
                value:
                  userId: user3
                  title: team outing
                  body: There will be a team outing this Friday at 6:00pm. Kindly RSVP.
                  sender: admin@email.com
                  recipient: all employees
                  timeSent: 09:00am
        required: true
      responses:
        "201":
          description: Notification sent
        "400":
          description: "Invalid notification input, notification not sent"
        "403":
          description: Unauthorized
        "401":
          description: Bad request
  /admin/notifications/{notificationId}:
    put:
      tags:
      - Admins
      summary: Edit notification details
      description: Updates a notification in the system
      operationId: adminUpdateNotification
      parameters:
      - name: notificationId
        in: path
        description: ID of the notification to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Notification object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notifications'
            examples:
              notification:
                value:
                  userId: user1
                  title: java devs meeting
                  body: There will be a stand up at 5:00pm kindly note the change in time and plan ahead.
                  sender: admin@email.com
                  recipient: backend devs
                  timeSent: 08:30am
        required: true
      responses:
        "200":
          description: Notification updated
        "400":
          description: "Invalid notification input, notification not updated"
        "409":
          description: A notification with provided id doesn't exist
        "403":
          description: Unauthorized
        "401":
          description: Bad request
        "404":
          description: Notification not found
    delete:
      tags:
      - Admins
      summary: Delete a notification
      description: Deletes a notification from the system
      operationId: deleteNotification
      parameters:
      - name: notificationId
        in: path
        description: ID of the notification to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Notification deleted
        "400":
          description: Invalid notification ID
        "403":
          description: Unauthorized
        "404":
          description: Notification not found
  /user/notifications:
    get:
      tags:
      - Users
      summary: Returns all the notifications
      description: "user user has the ability to see all the notifications in their department, or the ones sent to them directly"
      operationId: userGetAllNotifications
      responses:
        "200":
          description: "Get all notifications in their department, or the ones sent to them directl"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notifications'
              examples:
                notifications:
                  value:
                  - id: notification1
                    title: java devs meeting
                    body: There will be a stand up at 5:30pm kindly attend
                    sender: admin@email.com
                    recipient: backend devs
                    timeSent: 08:00am
                  - id: notification2
                    title: spring security bootcamp
                    body: "There will be a bootcamp on Monday 5th May, 2023 on Spring security. Kindly purpose to attend."
                    sender: admin@email.com
                    recipient: backend devs
                    timeSent: 08:00am
        "400":
          description: Bad input parameter
        "403":
          description: Unauthorized
  /user/notifications/{notificationId}:
    get:
      tags:
      - Users
      summary: Returns the notification requested
      description: "user user has the ability to see one of the notifications in their department, or the ones sent to them directly"
      operationId: userGetNotificationById
      parameters:
      - name: notificationId
        in: path
        description: ID of the notification to return
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "Get one of the notifications in their department, or the ones sent to them directl"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notifications'
              examples:
                notifications:
                  value:
                  - id: notification1
                    title: java devs meeting
                    body: There will be a stand up at 5:30pm kindly attend
                    sender: admin@email.com
                    recipient: backend devs
                    timeSent: 08:00am
        "400":
          description: Bad input parameter
        "403":
          description: Unauthorized
        "404":
          description: Not found
  /admin/post/{postId}:
    put:
      tags:
      - Admins
      summary: Edit blog details
      description: Updates a blog in the system
      operationId: adminUpdateBlog
      parameters:
      - name: postId
        in: path
        description: ID of the blog to update
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Blog object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blogs'
            examples:
              blog:
                value:
                  id: blog1
                  title: Spring security update
                  body: The spring security team had their anuall code update to ensure system is secure. The spring security team had their anuall code update to ensure system is more secure.The spring security team had their anuall code update to ensure system is secure.The spring security team had their anuall code update to ensure system is secure.
                  sender: admin@email.com
                  timeSent: 08:00am
                  date: 25-06-2022
        required: true
      responses:
        "200":
          description: Blog updated
        "400":
          description: "Invalid blog input, notification not updated"
        "409":
          description: A blog with provided id doesn't exist
        "403":
          description: Unauthorized
        "401":
          description: Bad request
        "404":
          description: Not found
    delete:
      tags:
      - Admins
      summary: Delete a blog post
      description: Deletes a blog from the system
      operationId: deleteBlog
      parameters:
      - name: postId
        in: path
        description: ID of the blog to delete
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Blog deleted
        "400":
          description: Invalid blog ID
        "403":
          description: Unauthorized
        "404":
          description: Not found
  /posts:
    get:
      tags:
      - posts
      summary: Retrieve all posts
      responses:
        "200":
          description: A list of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      tags:
      - posts
      summary: Create a new post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/{postId}:
    get:
      tags:
      - posts
      summary: Retrieve a specific post by ID
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The requested post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
      - posts
      summary: Update a post by ID
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
        required: true
      responses:
        "200":
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      tags:
      - posts
      summary: Delete a post by ID
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Successfully deleted
  /posts/{postId}/comments:
    get:
      tags:
      - Comments
      summary: Retrieve all comments for a post
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
    post:
      tags:
      - Comments
      summary: Add a new comment to a post
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /posts/{postId}/comments/{commentId}:
    delete:
      tags:
      - comments
      summary: Delete a comment by ID
      parameters:
      - name: postId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: commentId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Successfully deleted
  /products:
    get:
      tags:
      - Products
      summary: Retrieve a list of products
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
      - Products
      summary: Create a new product
      requestBody:
        description: Product object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Invalid input
  /products/{productId}:
    get:
      tags:
      - Products
      summary: Retrieve a specific product by ID
      parameters:
      - name: productId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The requested product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Product not found
    delete:
      tags:
      - Products
      summary: Delete a product by ID
      parameters:
      - name: productId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Successfully deleted
        "404":
          description: Product not found
  /orders:
    get:
      tags:
      - Orders
      summary: Retrieve a list of orders
      responses:
        "200":
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
      - Orders
      summary: Create a new order
      requestBody:
        description: Order object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid input
  /orders/{orderId}:
    get:
      tags:
      - Orders
      summary: Retrieve a specific order by ID
      parameters:
      - name: orderId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The requested order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "404":
          description: Order not found
  /orders/{orderId}/items:
    get:
      tags:
      - Order Items
      summary: Retrieve a list of items for a specific order
      parameters:
      - name: orderId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A list of order items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'
    post:
      tags:
      - Order Items
      summary: Add an item to a specific order
      parameters:
      - name: orderId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Order item object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrderItem'
        required: true
      responses:
        "201":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        "400":
          description: Invalid input
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
        firstName:
          type: string
          example: java
        lastName:
          type: string
          example: dev
        email:
          type: string
          format: email
          example: javadev@example.com
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: victor@example.com
        password:
          type: string
          example: password123
    RegisterRequest:
      type: object
      properties:
        firstName:
          type: string
          example: Victor
        lastName:
          type: string
          example: Adepoju
        email:
          type: string
          format: email
          example: victor@example.com
        password:
          type: string
          example: password123
        phone:
          type: string
          example: "08123456789"
    SocialAuthRequest:
      type: object
      properties:
        provider:
          type: string
          example: google
        token:
          type: string
          example: socialauth_token
    MagicLinkRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: victor@example.com
    MagicLinkVerifyRequest:
      type: object
      properties:
        token:
          type: string
          example: magic_link_token
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
          example: oldpassword123
        newPassword:
          type: string
          example: newpassword123
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: jwt_token
        user:
          $ref: '#/components/schemas/User'
    Organisation:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
          example: example organisation
        ownerId:
          type: string
    ActivityLog:
      type: object
      properties:
        id:
          type: string
          example: wyey234-4244ddd-32443r-432rf
        action:
          type: string
          example: login
        timestamp:
          type: string
          format: date-time
          example: 2023-07-13T15:26:10Z
        userId:
          type: string
          example: user1
    PaymentDto:
      type: object
      properties:
        paymentId:
          type: string
        orderId:
          type: string
          example: order101
        createdAt:
          type: string
          format: date
          example: 2024-07-01
        amount:
          type: number
          format: float
          example: 100
        paymentMethod:
          type: string
          example: credit_card
    Notifications:
      type: object
      properties:
        notificationId:
          type: string
          example: notification1
        title:
          type: string
          example: java devs meeting
        body:
          type: string
          example: There will be a stand up at 5:30pm kindly attend
        sender:
          type: string
          example: admin@email.com
        recipient:
          type: string
          example: backend devs
        timeSent:
          type: string
          format: time
          example: 08:00am
    Blogs:
      type: object
      properties:
        notificationId:
          type: string
          example: blog1
        title:
          type: string
          example: Spring security update
        body:
          type: string
          example: The spring security team had their anuall code update to ensure system is secure. The spring security team had their anuall code update to ensure system is secure.The spring security team had their anuall code update to ensure system is secure.The spring security team had their anuall code update to ensure system is secure.
        sender:
          type: string
          example: admin@email.com
        timeSent:
          type: string
          format: time
          example: 08:00am
        date:
          type: string
          format: date
          example: 0030-12-13
    EmailTemplate:
      type: object
      properties:
        templateId:
          type: string
          example: email1
        name:
          type: string
        subject:
          type: string
        body:
          type: string
          format: html
    RefreshTokenRequest:
      required:
      - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token used to obtain a new access token.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    AccessTokenResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: The newly generated access token.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvbGx5IEZpcnN0IiwiaWF0IjoxNTE2MjM5MDIyfQ.7weHsEFrBbFz-8Hg-ME4FROGzPsuq7hQFQUrjBJfmLo
        tokenType:
          type: string
          description: "The type of token issued (e.g., Bearer)."
          example: Bearer
        expiresIn:
          type: integer
          description: The duration in seconds for which the access token is valid.
          example: 3600
    Post:
      type: object
      properties:
        userId:
          type: string
        title:
          type: string
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    NewPost:
      type: object
      properties:
        userId:
          type: string
        title:
          type: string
        content:
          type: string
    UpdatePost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    Comment:
      type: object
      properties:
        commentId:
          type: string
        postId:
          type: string
        userId:
          type: string
        comment_text:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NewComment:
      type: object
      properties:
        commentId:
          type: string
        postId:
          type: string
        userId:
          type: string
        comment_text:
          type: string
    UserRoleRequest:
      required:
      - role
      type: object
      properties:
        role:
          type: string
          description: Role of the user in the organisation
          enum:
          - ADMIN
          - MEMBER
          - GUEST
    UserRoleResponse:
      required:
      - message
      - success
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the operation was successful
        message:
          type: string
          description: A message providing additional information about the response
        data:
          $ref: '#/components/schemas/UserRoleResponse_data'
    Product:
      required:
      - id
      - name
      - price
      - product_id
      - quantity
      type: object
      properties:
        productId:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: string
        description:
          type: string
        quantity:
          type: integer
    NewProduct:
      required:
      - name
      - price
      - product_id
      - quantity
      type: object
      properties:
        productId:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: string
        description:
          type: string
        quantity:
          type: integer
    Order:
      required:
      - id
      - orderId
      - total
      type: object
      properties:
        id:
          type: string
        orderI:
          type: string
          format: uuid
        userId:
          type: integer
        status:
          type: string
        total:
          type: string
          format: decimal
        created_at:
          type: string
          format: date-time
    NewOrder:
      required:
      - orderId
      - total
      type: object
      properties:
        order_id:
          type: string
          format: uuid
        user_id:
          type: integer
        status:
          type: string
          default: pending
        total:
          type: string
          format: decimal
    OrderItem:
      required:
      - id
      - order_id
      - product_id
      - quantity
      type: object
      properties:
        id:
          type: string
        order_id:
          type: string
        product_id:
          type: string
        quantity:
          type: integer
        price:
          type: string
          format: decimal
        created_at:
          type: string
          format: date-time
    NewOrderItem:
      required:
      - orderId
      - productId
      - quantity
      type: object
      properties:
        orderId:
          type: string
        productId:
          type: string
        quantity:
          type: integer
          default: 1
        price:
          type: string
          format: decimal
    UserRoleResponse_data:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user whose role was updated
        organisationId:
          type: string
          description: ID of the organisation where the role was updated
        role:
          type: string
          description: The new role of the user in the organisation
          enum:
          - ADMIN
          - MEMBER
          - GUEST
